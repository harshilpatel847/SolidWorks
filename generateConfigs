' ******************************************************************************
' Auto-Generate Custom SolidWorks Configurations
' Harshil Patel
' July 24, 2025
' Scrub Daddy, Inc.
'
' This macro generates several custom configurations and adds three custom
' properties to each:
' Property 1: Part Number
' Property 2: Description
' Property 3: Color
'
' Additional properties are added to the file that Bild PDM will be able to read
' and apply to the file for document control.
'
' The number, names, and property values of the configurations are driven
' by selections made of page 2 of the UserForm.
'
' ******************************************************************************

Option Explicit

Dim swApp As SldWorks.SldWorks
Dim swModel As SldWorks.ModelDoc2
Dim swConfigMgr As SldWorks.ConfigurationManager
Dim swConfig As SldWorks.Configuration
Dim swCustomPropMgr As SldWorks.CustomPropertyManager
Dim ctrl As MSForms.Control
Dim colorListArray() As String
Dim i As Integer
Dim baseNamePath As String
Dim baseName As String
Dim baseNameFormatted As String
Dim configArray() As String
Dim configCount As Long
Dim currentConfig As String
Dim boolStatus As Boolean
Dim retVal As Long
Dim subCategory As String
Dim longErrors As Long, longWarnings As Long

Sub main()

    ' Sets the appropriate targets in the D.O.M. so the macro works on the specific document you have open and active right now.
    Set swApp = Application.SldWorks
    Set swModel = swApp.ActiveDoc
    
    ' Error handling in the event this macro is launched from the special execution page of the UserForm
    If swModel Is Nothing Then
        MsgBox ("Please open a specialty shape CAD model and try again (generateConfigs)")
        Exit Sub
    End If
    
    Set swConfigMgr = swModel.ConfigurationManager
    Set swConfig = swModel.GetActiveConfiguration
    Set swCustomPropMgr = swConfig.CustomPropertyManager
    
    ' Create colorList array based on check boxes from the second page of the UserForm
    i = 0
    For Each ctrl In newProductSetup.Controls
        ReDim Preserve colorListArray(i)
        If TypeName(ctrl) = "CheckBox" Then
            If ctrl.Value = True Then
                colorListArray(i) = ctrl.Caption
                i = i + 1
            End If
        End If
    Next ctrl
    ReDim Preserve colorListArray(UBound(colorListArray) - 1)
            
    ' Variables to hold the names to be used for configurations and descriptions
    ' baseNamePath .......... The full path to the file that this macro is acting on
    ' baseName .............. The name of the file (no extension)
    ' baseNameFormatted ..... A human readable version of the file name suitable for use in the Description metadata field.
    baseNamePath = Right(swModel.GetPathName, Len(swModel.GetPathName) - InStrRev(swModel.GetPathName, "\"))
    baseName = Left(baseNamePath, InStrRev(baseNamePath, ".") - 1)
    baseNameFormatted = Replace(baseName, "scrubMommy", "Scrub Mommy")
    baseNameFormatted = Replace(baseNameFormatted, "MommyEssential", "Mommy Essential")
    baseNameFormatted = Replace(baseNameFormatted, "scrubDaddy", "Scrub Daddy")
    baseNameFormatted = Replace(baseNameFormatted, "DaddyEssential", "Daddy Essential")
    baseNameFormatted = Replace(baseNameFormatted, "_", ", ")
    
    ' In the case that this CAD model already had some configurations setup, get all configurations
    configArray = swModel.GetConfigurationNames
    
    ' This FOR loop goes through each element in the previously defined array (colorListArray) and does the following:
    ' 1) Creates a configuration with a modified name based on the current array element
    ' 2) Activates the configuration that was just created
    ' 3) Creates custom property fields for the configuration and sets their values, where applicable.
    For i = 0 To UBound(colorListArray)
        ' This FOR loop iterates through the existing configuration list to prevent duplicate config conflicts
        For configCount = 0 To UBound(configArray)
            'currentConfig = configArray(configCount)
            If configArray(configCount) = (baseName & "_" & Replace(colorListArray(i), " ", "")) Then ' If a configuration already exists with this name
                ' Prevent this particular configuration from being created
                GoTo nextIteration ' SKIP!
            End If
        Next configCount
        ' If we looped through all existing configurations and found no naming conflicts, proceed with new config creation
        Set swConfig = swConfigMgr.AddConfiguration2(baseName & "_" & Replace(colorListArray(i), " ", ""), "", "", swConfigOption_SuppressByDefault, "", "", False)
        boolStatus = swModel.ShowConfiguration2(baseName & "_" & colorListArray(i))
        retVal = swConfig.CustomPropertyManager.Add3("Part Number", swCustomInfoType_e.swCustomInfoText, "", swCustomPropertyAddOption_e.swCustomPropertyDeleteAndAdd)
        retVal = swConfig.CustomPropertyManager.Add3("Description", swCustomInfoType_e.swCustomInfoText, baseNameFormatted & ", " & colorListArray(i), swCustomPropertyAddOption_e.swCustomPropertyDeleteAndAdd)
        retVal = swConfig.CustomPropertyManager.Add3("Color", swCustomInfoType_e.swCustomInfoText, colorListArray(i), swCustomPropertyAddOption_e.swCustomPropertyDeleteAndAdd)
nextIteration: ' label to jump to next iteration
    Next i
    
    ' Assign custom properties to all configurations so the metadata in Bild can be assigned properly
    ' Identify the product sub-category (Scrub Daddy or Scrub Mommy, regular or Essentials)
    If newProductSetup.scrubDaddyOption.Value = True Then
        subCategory = "Daddy"
    ElseIf newProductSetup.scrubMommyOption.Value = True Then
        subCategory = "Mommy"
    ElseIf newProductSetup.scrubDaddyEssentialOption.Value = True Then
        subCategory = "Daddy Essential"
    ElseIf newProductSetup.scrubMommyEssentialOption.Value = True Then
        subCategory = "Mommy Essential"
    End If
    Set swCustomPropMgr = swModel.Extension.CustomPropertyManager("")
    retVal = swCustomPropMgr.Add3("Category", swCustomInfoType_e.swCustomInfoText, "Foam", swCustomPropertyAddOption_e.swCustomPropertyDeleteAndAdd)
    retVal = swCustomPropMgr.Add3("Sub Category", swCustomInfoType_e.swCustomInfoText, subCategory, swCustomPropertyAddOption_e.swCustomPropertyDeleteAndAdd)
    retVal = swCustomPropMgr.Add3("Part Number", swCustomInfoType_e.swCustomInfoText, baseName, swCustomPropertyAddOption_e.swCustomPropertyDeleteAndAdd)
    retVal = swCustomPropMgr.Add3("Finish", swCustomInfoType_e.swCustomInfoText, "N/A", swCustomPropertyAddOption_e.swCustomPropertyDeleteAndAdd)
    retVal = swCustomPropMgr.Add3("DrawnBy", swCustomInfoType_e.swCustomInfoText, newProductSetup.engineerList.Text, swCustomPropertyAddOption_e.swCustomPropertyDeleteAndAdd)
    retVal = swCustomPropMgr.Add3("DrawnDate", swCustomInfoType_e.swCustomInfoText, Format(Date, "ddmmmyyyy"), swCustomPropertyAddOption_e.swCustomPropertyDeleteAndAdd)
    retVal = swCustomPropMgr.Add3("Revision", swCustomInfoType_e.swCustomInfoText, "A", swCustomPropertyAddOption_e.swCustomPropertyDeleteAndAdd)

    ' Save
    boolStatus = swModel.Save3(1, longErrors, longWarnings)
    
End Sub

